apiVersion: 1.0.0
metadata:
  name: PFR_POC_Workspacehwrlv
projects:
  - name: dotnet-app
    source:
      location: 'git@github.com:ProofOfConceptDeveloper/PFR.git'
      startPoint: main
      type: git
components:
  - id: redhat-developer/che-omnisharp-plugin/latest
    type: chePlugin
    alias: omnisharp
  - id: redhat-developer/netcoredbg-theia-plugin/latest
    type: chePlugin
    alias: netcoredbg
  - mountSources: true
    endpoints:
      - name: app-endpoint
        port: 5000
    memoryLimit: 512Mi
    type: dockerimage
    volumes:
      - name: nuget
        containerPath: /home/jboss/.nuget
    image: 'registry.redhat.io/codeready-workspaces/stacks-dotnet-rhel8:2.8'
    alias: pfr-ui
    env:
      - value: Codeready
        name: ASPNETCORE_ENVIRONMENT
  - mountSources: true
    memoryLimit: 512Mi
    type: dockerimage
    volumes:
      - name: nuget
        containerPath: /home/jboss/.nuget
    image: 'registry.redhat.io/codeready-workspaces/stacks-dotnet-rhel8:2.8'
    alias: pfr-bre
    env:
      - value: Codeready
        name: ASPNETCORE_ENVIRONMENT
  - referenceContent: |-
      ---
      apiVersion: v1
      kind: List
      items:
      -
        apiVersion: apps/v1
        kind: Deployment
        metadata:
          annotations:
            kompose.cmd: kompose convert
            kompose.version: 1.22.0 (HEAD)
          creationTimestamp: null
          labels:
            io.kompose.service: kafka
          name: kafka
        spec:
          replicas: 1
          selector:
            matchLabels:
              io.kompose.service: kafka
          strategy: {}
          template:
            metadata:
              annotations:
                kompose.cmd: kompose convert
                kompose.version: 1.22.0 (HEAD)
              creationTimestamp: null
              labels:
                io.kompose.service: kafka
            spec:
              containers:
                - args:
                    - sh
                    - -c
                    - bin/kafka-server-start.sh config/server.properties --override listeners=${KAFKA_LISTENERS} --override advertised.listeners=${KAFKA_ADVERTISED_LISTENERS} --override zookeeper.connect=${KAFKA_ZOOKEEPER_CONNECT}
                  env:
                    - name: KAFKA_ADVERTISED_LISTENERS
                      value: PLAINTEXT://localhost:9092
                    - name: KAFKA_LISTENERS
                      value: PLAINTEXT://0.0.0.0:9092
                    - name: KAFKA_ZOOKEEPER_CONNECT
                      value: zookeeper:2181
                    - name: LOG_DIR
                      value: /tmp/logs
                  image: strimzi/kafka:0.19.0-kafka-2.5.0
                  name: kafka
                  ports:
                    - containerPort: 9092
                  resources: {}
              restartPolicy: Always
      -
        apiVersion: v1
        kind: Service
        metadata:
          annotations:
            kompose.cmd: kompose convert
            kompose.version: 1.22.0 (HEAD)
          creationTimestamp: null
          labels:
            io.kompose.service: kafka
          name: kafka
        spec:
          ports:
            - name: "9092"
              port: 9092
              targetPort: 9092
          selector:
            io.kompose.service: kafka
        status:
          loadBalancer: {}
      -
        apiVersion: apps/v1
        kind: Deployment
        metadata:
          annotations:
            kompose.cmd: kompose convert
            kompose.version: 1.22.0 (HEAD)
          creationTimestamp: null
          labels:
            io.kompose.service: zookeeper
          name: zookeeper
        spec:
          replicas: 1
          selector:
            matchLabels:
              io.kompose.service: zookeeper
          strategy: {}
          template:
            metadata:
              annotations:
                kompose.cmd: kompose convert
                kompose.version: 1.22.0 (HEAD)
              creationTimestamp: null
              labels:
                io.kompose.service: zookeeper
            spec:
              containers:
                - args:
                    - sh
                    - -c
                    - bin/zookeeper-server-start.sh config/zookeeper.properties
                  env:
                    - name: LOG_DIR
                      value: /tmp/logs
                  image: strimzi/kafka:0.19.0-kafka-2.5.0
                  name: zookeeper
                  ports:
                    - containerPort: 2181
                  resources: {}
              restartPolicy: Always
      -
        apiVersion: v1
        kind: Service
        metadata:
          annotations:
            kompose.cmd: kompose convert
            kompose.version: 1.22.0 (HEAD)
          creationTimestamp: null
          labels:
            io.kompose.service: zookeeper
          name: zookeeper
        spec:
          ports:
            - name: "2181"
              port: 2181
              targetPort: 2181
          selector:
            io.kompose.service: zookeeper
        status:
          loadBalancer: {}
    type: kubernetes
    reference: codeready/crw-kafka.yaml
    alias: kafka
  - endpoints:
      - name: mongodb
        port: 27017
    memoryLimit: 512Mi
    type: dockerimage
    volumes:
      - name: mongo-1
        containerPath: /data/configdb
      - name: mongo-2
        containerPath: /data/db
    image: 'docker.io/mongo:4.0.25'
    alias: mongodb
    env:
      - value: root
        name: MONGO_INITDB_ROOT_USERNAME
      - value: password
        name: MONGO_INITDB_ROOT_PASSWORD
  - endpoints:
      - name: mongo-express
        port: 8081
    memoryLimit: 512Mi
    type: dockerimage
    image: 'docker.io/mongo-express:0.54'
    alias: mongo-express
    env:
      - value: root
        name: ME_CONFIG_MONGODB_ADMINUSERNAME
      - value: password
        name: ME_CONFIG_MONGODB_ADMINPASSWORD
      - value: localhost
        name: ME_CONFIG_MONGODB_SERVER
commands:
  - name: 1. Update UI dependencies
    actions:
      - workdir: '${CHE_PROJECTS_ROOT}/dotnet-app/PoliticalFinanceReturn/PFR.Web.UI'
        type: exec
        command: dotnet restore
        component: pfr-ui
  - name: 2. Build UI
    actions:
      - workdir: '${CHE_PROJECTS_ROOT}/dotnet-app/PoliticalFinanceReturn/PFR.Web.UI'
        type: exec
        command: dotnet build
        component: pfr-ui
  - name: 3. Run UI
    actions:
      - workdir: '${CHE_PROJECTS_ROOT}/dotnet-app/PoliticalFinanceReturn/PFR.Web.UI'
        type: exec
        command: dotnet run
        component: pfr-ui
  - name: 1. Update BRE dependencies
    actions:
      - workdir: '${CHE_PROJECTS_ROOT}/dotnet-app/PFR.Validation/bre/PFR.BRE/PFR.BRE'
        type: exec
        command: dotnet restore
        component: pfr-bre
  - name: 2. Build BRE
    actions:
      - workdir: '${CHE_PROJECTS_ROOT}/dotnet-app/PFR.Validation/bre/PFR.BRE/PFR.BRE'
        type: exec
        command: dotnet build
        component: pfr-bre
  - name: 3. Run BRE
    actions:
      - workdir: '${CHE_PROJECTS_ROOT}/dotnet-app/PFR.Validation/bre/PFR.BRE/PFR.BRE'
        type: exec
        command: dotnet run
        component: pfr-bre
